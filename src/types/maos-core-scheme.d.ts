/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get health status */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get configuration of the caller */
        get: operations["getCallerConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invocations/async": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new asynchronous invocation job.
         * @description This endpoint allows an agent user to create a new asynchronous invocation job.
         *     The job is added to a queue and will be processed by the next available agent.
         *
         *     Key features:
         *     - Asynchronous execution: The endpoint returns immediately with an invocation ID.
         *     - Job queuing: The invocation is queued for processing by available agents.
         *     - Status tracking: The returned invocation ID can be used to query the job's status and results.
         *
         *     Usage flow:
         *     1. Submit the invocation job using this endpoint.
         *     2. Receive an immediate response with the invocation ID.
         *     3. Use the invocation ID to check the job's status and retrieve results by calling:
         *        GET /v1/invocations/{id}
         *
         *     Note:
         *     - This endpoint is designed for non-blocking operations where immediate results are not required.
         *     - The status and results of the invocation can be queried using the /v1/invocations/{id} endpoint,
         *       where {id} is the invocation ID returned by this POST request.
         *
         */
        post: operations["createInvocationAsync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invocations/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new synchronous invocation job
         * @description This endpoint allows an agent user to create and execute a new invocation job synchronously.
         *     The request will wait for the job to complete before returning the result.
         *
         *     Key features:
         *     - Synchronous execution: The endpoint waits for the job to finish before responding.
         *     - Immediate results: The response includes the complete result of the invocation.
         *     - Blocking operation: This call may take some time to complete, depending on the job's complexity.
         *
         *     Usage flow:
         *     1. Submit the invocation job using this endpoint.
         *     2. The agent retrieves and processes the job.
         *     3. Once the job is completed, the endpoint returns with the full result.
         *
         *     Response includes:
         *     - Invocation ID
         *     - Job status (which should be 'completed' unless an error occurred)
         *     - Full result data or error details
         *
         *     Note: This endpoint is suitable for operations where immediate results are required and
         *     the client can wait for the job to complete. For long-running tasks, consider using
         *     the asynchronous version of this endpoint to avoid timeout issues.
         *
         *     Caution: Depending on the nature of the invocation job, this endpoint may have
         *     longer response times. Set client timeouts accordingly.
         *
         */
        post: operations["createInvocationSync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invocations/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the next available invocation job for processing
         * @description This endpoint is used by agents to fetch the next available invocation job.
         *     It allows agents to retrieve jobs for processing.
         *
         *     Key features:
         *     - State transition: Upon successful retrieval, the job state changes from 'available' to 'running'.
         *     - Exclusive access: Once a job is retrieved, it's locked for the assigned agent to prevent duplicate processing.
         *
         *     Note:
         *     - If no jobs are available, a 404 status is returned.
         *     - Agents should implement appropriate error handling and retry mechanisms.
         *
         */
        get: operations["getNextInvocation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invocations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the status and result of an invocation job by ID
         * @description Retrieves the current status and result (if available) of an invocation job.
         *     This endpoint is used by the caller to check the progress of an asynchronous invocation.
         *
         *     Possible invocation states:
         *     - available: The job is queued and waiting to be processed.
         *     - running: The job is currently being executed.
         *     - completed: The job has finished successfully.
         *     - cancelled: The job was cancelled before completion.
         *     - discarded: The job was discarded due to an error or system issue.
         *
         */
        get: operations["getInvocationById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invocations/{invoke_id}/response": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return invocation result */
        post: operations["returnInvocationResponse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invocations/{invoke_id}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return invocation error */
        post: operations["returnInvocationError"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/completion/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get model list. */
        get: operations["listCompletionModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/completion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text completion. */
        post: operations["createCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/embedding/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List embedding models. */
        get: operations["listEmbeddingModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/embedding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create embedding of text. */
        post: operations["createEmbedding"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List database. */
        get: operations["listVectoreStores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List collection. */
        get: operations["listCollection"];
        put?: never;
        /** Create a collection. */
        post: operations["createCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/vector/collection/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** query data from a collection. */
        get: operations["queryCollection"];
        put?: never;
        /** Upsert data into a collection. */
        post: operations["upsertCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rerank/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List models. */
        get: operations["listRerankModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rerank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Measure the relevance of a list of documents to a query. */
        post: operations["createRerank"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/api_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List API tokens */
        get: operations["adminListApiTokens"];
        put?: never;
        /** Create a new API token */
        post: operations["adminCreateApiToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Agents */
        get: operations["adminListAgents"];
        put?: never;
        /** Create a new Agent */
        post: operations["adminCreateAgent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/agents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one specific Agents */
        get: operations["adminGetAgent"];
        put?: never;
        post?: never;
        /** Delete one specific Agent */
        delete: operations["adminDeleteAgent"];
        options?: never;
        head?: never;
        /** Update one specific Agent */
        patch: operations["adminUpdateAgent"];
        trace?: never;
    };
    "/v1/admin/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Deployments */
        get: operations["adminListDeployments"];
        put?: never;
        /** Create a new Deployment */
        post: operations["adminCreateDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/deployments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific Deployment. */
        get: operations["adminGetDeployment"];
        put?: never;
        post?: never;
        /** Delete a specific Deployment. Only draft deployments can be deleted. */
        delete: operations["adminDeleteDeployment"];
        options?: never;
        head?: never;
        /** Update a specific Deployment. Only draft deployments can be updated. */
        patch: operations["adminUpdateDeployment"];
        trace?: never;
    };
    "/v1/admin/deployments/{id}/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit the Deployment for reviewing. Only draft deployments can be submitted. After submitting, the deployment will be in `reviewing` status. Reviewers will be notified. */
        post: operations["adminSubmitDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/deployments/{id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Publish the Deployment. Only draft deployments can be published. After publishing, the deployment will be in `deployed` status. */
        post: operations["adminPublishDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/deployments/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject the Deployment. Only draft deployments can be rejected. And only the reviewer can reject the deployment. After rejecting, the deployment will be in `rejected` status. */
        post: operations["adminRejectDeployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/configs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a specific Config. Only draft configs can be updated. */
        patch: operations["adminUpdateConfig"];
        trace?: never;
    };
    "/v1/admin/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get system setting */
        get: operations["adminGetSetting"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update system setting */
        patch: operations["adminUpdateSetting"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A key-value structure representing the caller's configuration */
        Configuration: {
            [key: string]: string;
        };
        Error: {
            /** @description The error message */
            error: string;
        };
        /**
         * @description The state of the invocation job
         *     - available: The job is queued and waiting to be processed.
         *     - running: The job is currently being executed.
         *     - completed: The job has finished successfully.
         *     - cancelled: The job was cancelled before completion.
         *     - discarded: The job was discarded due to an error or system issue.
         *
         * @enum {string}
         */
        InvocationState: "available" | "running" | "completed" | "cancelled" | "discarded";
        InvocationResult: {
            /** @description The unique identifier for the invocation job */
            id: string;
            state: components["schemas"]["InvocationState"];
            /**
             * Format: int64
             * @description The timestamp when the job was retrieved and attempted by agent
             */
            attempted_at?: number;
            /**
             * Format: int64
             * @description The timestamp when the job was finalized
             */
            finalized_at?: number;
            /** @description The result of the invocation job */
            result?: Record<string, never>;
            /** @description The errors of the invocation job */
            errors?: Record<string, never>;
        };
        InvocationJob: {
            /** @description The unique identifier for the invocation job */
            id: string;
            /** @description The metadata of the invocation job. it contains 'kind' to specify the type of the invocation job */
            meta: Record<string, never>;
            /** @description The payload for the invocation job */
            payload: Record<string, never>;
        };
        MessageContent: {
            text?: string;
        } | {
            /** @description The based64 encoded image file. Only "jpeg" and "png" are supported by all providers. */
            image?: string;
        } | {
            /**
             * Format: uri
             * @description The URL of the image file. Only "jpeg" and "png" are supported by all providers.
             */
            image_url?: string;
        };
        Message: {
            /** @enum {string} */
            role?: "system" | "assistant" | "user";
            content?: components["schemas"]["MessageContent"][];
        };
        Embedding: {
            /** @description The embedding of the text. */
            embedding?: number[];
            /** @description The index of the text in the original list. */
            index?: number;
        };
        /** @enum {string} */
        CollectionDataType: "INT64" | "VARCHAR" | "BOOL" | "INT8" | "INT16" | "INT32" | "INT64" | "FLOAT" | "JSON" | "ARRAY" | "BINARY_VECTOR" | "FLOAT_VECTOR" | "FLOAT16_VECTOR" | "BFLOAT16_VECTOR" | "SPARSE_FLOAT_VECTOR";
        CollectionField: {
            name?: string;
            data_type?: components["schemas"]["CollectionDataType"];
            /** @description The maximum length of the field. It's mandatory for VARCHAR data type. */
            max_length?: number;
            is_primary?: boolean;
        };
        CollectionIndex: {
            index_name?: string;
            field_name?: string;
            /** @enum {string} */
            index_type?: "FLAT" | "IVF_FLAT" | "IVF_SQ8" | "IVF_PQ" | "GPU_IVF_FLAT" | "GPU_IVF_PQ" | "HNSW" | "DISKANN" | "BIN_FLAT" | "BIN_IVF_FLAT" | "SPARSE_INVERTED_INDEX" | "SPARSE_WAND";
            /** @enum {string} */
            metric_type?: "L2" | "IP" | "COSINE" | "JACCARD" | "HAMMING";
            parameter?: {
                /** @description Number of cluster units */
                nlist?: number;
                /** @description Number of factors of product quantization */
                nfactors?: number;
                /** @description M defines tha maximum number of outgoing connections in the graph. Higher M leads to higher accuracy/run_time at fixed ef/efConstruction. Required when index type is *HNSW*. */
                M?: number;
                /** @description ef_construction controls index search speed/build speed tradeoff. Increasing the efConstruction parameter may enhance index quality, but it also tends to lengthen the indexing time. Required when index type is *HNSW*. */
                efConstruction?: number;
                /** @description The proportion of small vector values that are excluded during the indexing process. This option allows fine-tuning of the indexing process, making a trade-off between efficiency and accuracy by disregarding small values when building the index. It's required when index type is *SPARSE_INVERTED_INDEX* or *SPARSE_WAND*. */
                drop_ratio_build?: number;
            };
        };
        RerankResult: {
            /** @description The document. */
            text?: string;
            /** @description The score of the document. */
            score?: number;
            /** @description The index of the document in the original list. */
            index?: number;
        };
        /** @enum {string} */
        Permission: "config:read" | "invocation:create" | "invocation:read" | "invocation:respond" | "admin";
        /** @example {
         *       "ID": "token123",
         *       "agent_id": 1,
         *       "expire_at": 1672531200,
         *       "created_by": "admin@example.com",
         *       "created_at": 1640995200,
         *       "Permissions": [
         *         "config:read",
         *         "invocation:read"
         *       ]
         *     } */
        ApiToken: {
            id: string;
            /** Format: int64 */
            agent_id: number;
            /** Format: int64 */
            expire_at: number;
            created_by: string;
            /** Format: int64 */
            created_at: number;
            permissions: components["schemas"]["Permission"][];
        };
        /** @example {
         *       "id": "token123",
         *       "agent_id": 2,
         *       "expire_at": 1704067200,
         *       "created_by": "admin@bluextrade.com",
         *       "Permissions": [
         *         "config:read",
         *         "invocation:read"
         *       ]
         *     } */
        ApiTokenCreate: {
            id: string;
            /** Format: int64 */
            agent_id: number;
            /** Format: int64 */
            expire_at: number;
            created_by: string;
            permissions: string[];
        };
        /** @example {
         *       "id": 16888,
         *       "name": "agent-16888",
         *       "created_at": 1640995200
         *     } */
        Agent: {
            /** Format: int64 */
            id: number;
            name: string;
            updatable: boolean;
            /** Format: int64 */
            created_at: number;
        };
        /** @example {
         *       "name": "agent-16888"
         *     } */
        AgentCreate: {
            name: string;
        };
        Deployment: {
            /** Format: int64 */
            id: number;
            name: string;
            /** @enum {string} */
            status: "draft" | "reviewing" | "approved" | "rejected" | "deployed" | "retired" | "cancelled";
            reviewers: string[];
            notes?: Record<string, never>;
            /** Format: int64 */
            config_suite_id?: number;
            /** Format: int64 */
            created_at: number;
            created_by: string;
            /** Format: int64 */
            approved_at?: number;
            approved_by?: string;
            /** Format: int64 */
            finished_at?: number;
            finished_by?: string;
        };
        Config: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            agent_id: number;
            agent_name: string;
            min_agent_version?: string;
            content: {
                [key: string]: string;
            };
            /** Format: int64 */
            created_at: number;
            created_by: string;
            /** Format: int64 */
            updated_at?: number;
            updated_by?: string;
        };
        DeploymentDetail: {
            /** Format: int64 */
            id: number;
            name: string;
            /** @enum {string} */
            status: "draft" | "reviewing" | "approved" | "rejected" | "deployed" | "retired" | "cancelled";
            reviewers: string[];
            notes?: Record<string, never>;
            /** Format: int64 */
            created_at: number;
            created_by: string;
            /** Format: int64 */
            approved_at?: number;
            approved_by?: string;
            /** Format: int64 */
            finished_at?: number;
            finished_by?: string;
            configs?: components["schemas"]["Config"][];
        };
        Setting: {
            deployment_approve_required: boolean;
            cluster_name: string;
        };
    };
    responses: {
        /** @description Bad Request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The health status of the service. it can be "healthy" or "unhealthy" */
                        status: string;
                    };
                };
            };
        };
    };
    getCallerConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Configuration"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createInvocationAsync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the agent to process the invocation job */
                    agent: string;
                    /** @description The metadata of the invocation job */
                    meta: Record<string, never>;
                    /** @description The payload for the invocation job */
                    payload: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Async invocation created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The unique identifier of the created invocation job */
                        id: string;
                    };
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    createInvocationSync: {
        parameters: {
            query?: {
                /** @description The maximum time (in seconds) to wait for job completion. default is 10s */
                wait?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the agent to process the invocation job */
                    agent: string;
                    /** @description The metadata of the invocation job */
                    meta: Record<string, never>;
                    /** @description The payload for the invocation job */
                    payload: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Async invocation created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationResult"];
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request timeout */
            408: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    getNextInvocation: {
        parameters: {
            query?: {
                /** @description Maximum time (in seconds) to wait for a job if none are immediately available. Default is 10s. */
                wait?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationJob"];
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No invocation job available */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    getInvocationById: {
        parameters: {
            query?: {
                /** @description The maximum time (in seconds) to wait for job completion. If not specified, returns immediately. */
                wait?: number;
            };
            header?: never;
            path: {
                /** @description The unique identifier of the invocation job. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationResult"];
                };
            };
            /** @description Invocation is still in progress */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationResult"];
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invocation job not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    returnInvocationResponse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoke_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The result of the invocation */
                    result?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invocation job not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    returnInvocationError: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoke_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The error details of the invocation */
                    errors?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invocation job not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    listCompletionModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: string;
                            provider?: string;
                            name?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The model id. */
                    model_id: string;
                    messages: components["schemas"]["Message"][];
                    /** @description Custom text sequences that will cause the model to stop generating. */
                    stop_sequences?: string[];
                    temperature?: number;
                    max_tokens?: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        messages?: components["schemas"]["Message"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listEmbeddingModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: string;
                            provider?: string;
                            name?: string;
                            /** @description The dimension of the output vector. */
                            dimension?: number;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createEmbedding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The model id. */
                    model_id: string;
                    /** @description The text to embedded. */
                    input: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The embeddings of the text. */
                        data?: components["schemas"]["Embedding"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listVectoreStores: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The list of databases. */
                        data?: string[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCollection: {
        parameters: {
            query?: never;
            header: {
                /** @description The name of the database to be accessed. */
                MAOS_VECTOR_DATABASE_NAME: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The list of collections. */
                        data?: string[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCollection: {
        parameters: {
            query?: never;
            header: {
                /** @description The name of the database to be accessed. */
                MAOS_VECTOR_DATABASE_NAME: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the collection. */
                    name: string;
                    fields: components["schemas"]["CollectionField"][];
                    indexes?: components["schemas"]["CollectionIndex"][];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The name of the collection. */
                        data?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    queryCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsertCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection. */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listRerankModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: string;
                            provider?: string;
                            name?: string;
                        }[];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createRerank: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The model id. */
                    model_id: string;
                    /** @description The list of documents. */
                    documents: string[];
                    /** @description The query. */
                    query: string;
                };
            };
        };
        responses: {
            /** @description The result of the rerank. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["RerankResult"][];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    adminListApiTokens: {
        parameters: {
            query?: {
                /** @description Page number (default 1) */
                page?: number;
                /** @description Page number (default 10) */
                page_size?: number;
                /** @description Filter by agent ID */
                agent_id?: number;
                /** @description Filter by creator */
                created_by?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ApiToken"][];
                        meta: {
                            total_pages: number;
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminCreateApiToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "AgentID": 3,
                 *       "ExpireAt": 1735689600,
                 *       "Permissions": [
                 *         "config:read",
                 *         "invocation:read"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["ApiTokenCreate"];
            };
        };
        responses: {
            /** @description Successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiToken"];
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminListAgents: {
        parameters: {
            query?: {
                /** @description Page number (default 1) */
                page?: number;
                /** @description Page number (default 10) */
                page_size?: number;
                /** @description Filter by agent ID */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Agent"][];
                        meta: {
                            total_pages: number;
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminCreateAgent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "agent-16888"
                 *     } */
                "application/json": components["schemas"]["AgentCreate"];
            };
        };
        responses: {
            /** @description Successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"];
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminGetAgent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Agent ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Agent"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agent not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminDeleteAgent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Agent ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agent not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agent is referenced by config */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminUpdateAgent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Agent ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Agent"];
                    };
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Agent not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminListDeployments: {
        parameters: {
            query?: {
                /** @description Page number (default 1) */
                page?: number;
                /** @description Page number (default 10) */
                page_size?: number;
                /** @description Filter by if the given user is a reviewer */
                reviewer?: string;
                /** @description Filter by deployment status. */
                status?: "draft" | "reviewing" | "approved" | "rejected" | "deployed" | "retired" | "cancelled";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Deployment"][];
                        meta: {
                            /**
                             * Format: int64
                             * @description Total number of deployments
                             */
                            total: number;
                            /** @description Current page number */
                            page: number;
                            /** @description Number of deployments per page */
                            page_size: number;
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminCreateDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    reviewers?: string[];
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Deployment"];
                    };
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminGetDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeploymentDetail"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminDeleteDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deployment deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminUpdateDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    user?: string;
                    name?: string;
                    reviewers?: string[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Deployment"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminSubmitDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminPublishDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description who is publishing the deployment */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminRejectDeployment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Deployment ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The reason for rejecting the deployment */
                    reason: string;
                    /** @description The user who is rejecting the deployment */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminUpdateConfig: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Config ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    user: string;
                    min_agent_version?: string;
                    content?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Config"];
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Config not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminGetSetting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current system setting */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
    adminUpdateSetting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    cluster_name?: string;
                    deployment_approve_required?: boolean;
                };
            };
        };
        responses: {
            /** @description Updated system setting */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
            400: components["responses"]["400"];
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deployment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            500: components["responses"]["500"];
        };
    };
}
